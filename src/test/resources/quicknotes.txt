jpa is only for schema rich databases, not for schema less.
<provider>org.hibernate.ejb.HibernatePersistence</provider>

@GeneratedValue(strategy = GenerationType.AUTO) not working - section customizing mapping with metadata. also check the demo.
we got the error:
ERROR: could not read a hi value
com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Table 'jpa_core_style.hibernate_sequence' doesn't exist
The reason is:
It will look for how the database that you are using generates ids. For MySql or HSQSL, there are increment fields that automatically increment. In Postgres or Oracle, they use sequence tables. Since you didn't specify a sequence table name, it will look for a sequence table named hibernate_sequence and use it for default. So you probably don't have such a sequence table in your database and now you get that error.
Either add a hibernate_sequence or your own sequence table and use the annotations to name your sequence table that you have.

Relationships:
JoinColumn - A PK column in one table is a FK column in another.
JoinTable - We use a third table to show the association among two tables. The third table would have FKs that are respective PKs in the other two tables.

Possible Cardinalities between relations (default strategy):
JPA               RDBMS            Fetch                Relationship
@OneToOne       JoinColumn         Eager                Unidirectional + Bidirectional
@OneToMany      JoinTable          Lazy                 Unidirectional
@ManyToOne      JoinColumn         Eager                Bidirectional
@ManyToMany     JoinTable          Lazy                 Bidirectional

Observations:
Without an auto increment generator in the DB, the generation type did not work at all. With it, the primary key was generated when used identity generation. Having an auto
increment and not having a generator also leads to error if PK is not provided.

changing the state of a persisted object in the scope of transaction start and commit will reflect in the DB.

One to many unidirectional has a default JoinTable strategy. It leads to the creation of a third table where the primary keys of both concerned tables are matched.
Check the test case - ProductProgrammerTest.thatUnidirectionalOneToManyInsertionIsSuccessful. Put a debug in the end line of the test case and then check the database. Creates a Join table.
In case you want to override the default jointable strategy, use joincolumn annotation. Check test case ProductProgrammerTest.thatUnidirectionalOneToManyInsertionIsSuccessfulForJoinColumn.

Inheritance strategies JPA:
    Single Table per class - This is the default inheritance strategy. Only one table is created and the subclass type is determined by the discriminator column created.
    Joined subclass - Independent Subclass tables whose PK matches the PK in parent and the parent table contains a discriminator. Common columns would stay in the parent, the child specific columns would only stay in the child.
    Table per concrete class - Total tables created: Parent + All children. After insertion, parent is empty and only children would be populated. Children would have their own
    specific column values and also accommodate the parent column values. There is no discriminator type since every record makes it to their own respective table. The id generation
    type was modified to TABLE for this to work. This strategy also generates a hibernate sequence.

Entity lifecycle:
    Events in an entity lifecycle: Persist, Update, Remove, Load
    States in an entity lifecycle which are governed by the events:
        Transient: When a persistent object is newly initialized but not persisted yet.
        Managed: When an entity is persisted by the Entity Manager or when it is loaded from the database. Operating on a managed entity loaded from the DB would change values in the DB.
        Detached: When a managed entity is committed or rolled back. It becomes like a java class without any DB synchronization.
        Removed: When an entity is deleted from the DB and not managed anymore. We can call merge on a detached entity to reattach it for DB synchronization and then call remove for delete.

Callback methods:
    On each event of an entity lifecycle, a pre and post method can be intercepted by the Entity Manager. They are helpful in executing business methods in
    the entity pojo before or after an event.
    Annotations for the same would be: @PrePersist and @PostPersist, @PostLoad, @PreUpdate and @PostUpdate, @PreRemove and @PostRemove.
    Example: We want to update a Person entity and here are some practical examples on how we would use it:
        @PrePersist:    Verify whether the Person's first and last name have been populated and are not null/empty.
        @PostPersist:   Log a successful message when a person has been persisted OR shoot an email about a new person registration.
        @PostLoad:      Massage the data that has been loaded from the database. An example is, based on the year of birth, you can calculate the age in the
                        entity class itself. You need to call refresh on entity manager after the find() operation for allowing post load to be called.

Entity Listeners:
    In the callback method case, we have seen that Business logic specific to attributes(first/last name for example) inside an entity are put inside the entity itself with the
    callback annotations. But what if this logic is common for more than one Entity? In that case we create an EntityListener,, a POJO annotated with @EntityListeners, then
    move the business logic methods into this class and then annotate these methods with the callback annotations. Now that the listener is completely created, we can register it
    with the respective Entities that may need them executed.
    But what if we need a listener for all entities? In this case, a default entity should be created in the entity mapping file. Then all entities will have this registered
    with them. However, out of 10, you want to exclude a default listener for only 1, you can still do that with @ExcludeDefaultListeners.





TODO:
Read more about @Generated value strategies.
